{"version":3,"sources":["components/Nav/Nav.js","components/Bar/Bar.js","helpers/Colors.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","components/SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["iconStyle","transform","Nav","Navbar","bg","variant","Container","Brand","size","style","Bar","height","columnStyle","width","borderTopLeftRadius","borderTopRightRadius","backgroundColor","color","marginTop","marginRight","Col","xs","className","Colors","colorSteps","sortingSteps","bubbleSort","array","push","slice","Array","length","fill","i","j","algorithmSteps","temp","iteration","currentIndex","array1","insertionSort","firstUnsorted","selectionSort","min","comparisonSteps","tmp","cmpIndex1","cmpIndex2","mergeSortAlgorithm","mergeSort","startIndex","endIndex","middle","parseInt","start","end","middleIndex","leftArray","rightArray","startLeft","indexOf","endLeft","startRight","endRight","k","merge","quickSortAlgorithm","quickSort","index","pivot","swap","partitionIndex","partition","index1","index2","UNSORTED_COLOR","BUTTONS_ALGORTIHMS_COLOR","buttonGroupStyle","display","marginBottom","textStyle","SortingVisualizer","useState","running","isRunning","speed","setSpeed","algorithmName","steps","setSteps","useEffect","localStorage","getItem","generateRandomArray","numbers","Set","add","Math","floor","random","from","animation","sortAlgorithmFunction","data","sortingLoop","name","sortSteps","a","Promise","resolve","setTimeout","ButtonGroup","Button","onClick","window","location","reload","disabled","Row","align","axis","x","xmax","xmin","xstep","onChange","setItem","saveSpeedToLocalStorage","map","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce305c54.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport { FcGenericSortingAsc } from \"react-icons/fc\";\n\nconst iconStyle = {\n  transform: \"rotate(-90deg)\"\n}\n\nconst Nav = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand>\n          <FcGenericSortingAsc size={35} style={iconStyle}/> Sorting algorithms visualization\n        </Navbar.Brand>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\n\nconst Bar = ({ height, color }) => {\n  const columnStyle = {\n    width: \"10px\",\n    height: height + \"px\",\n    borderTopLeftRadius: \"15px\",\n    borderTopRightRadius: \"15px\",\n    backgroundColor: color,\n    marginTop: 600 - height + \"px\",\n    marginRight: \"1px\",\n  };\n\n  const textStyle = {\n    transform: \"rotate(-90deg)\",\n    marginTop: \"25px\",\n  };\n\n  return (\n    <Col style={columnStyle} xs={12} className=\"align-middle\">\n      <p style={textStyle}>{height}</p>\n    </Col>\n  );\n};\n\nexport default Bar;\n","export const Colors = {\n  WHITE: \"#DCDCDC\",\n  RED: \"#b30000\",\n  GREEN: \"#008000\",\n  GREY: \"#686868\",\n  ORANGE: \"#FF7F50\",\n  DARK_ORANGE: \"#FF8C00\",\n  LIME_GREEN: \"#32CD32\",\n  BLUE: \"#1E90FF\",\n  GOLD: \"#FFD700\"\n};\n","import { Colors } from \"../helpers/Colors\";\n\nconst colorSteps = [];\nconst sortingSteps = [];\n\nexport function bubbleSort(array) {\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.WHITE));\n\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      algorithmSteps(array.slice(), i, j, Colors.RED);\n\n      if (array[j] > array[j + 1]) {\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n\n        algorithmSteps(array.slice(), i, j, Colors.BLUE);\n      }\n    }\n  }\n\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.GREEN));\n\n  return [\"Bubble Sort\", sortingSteps, colorSteps];\n}\n\nfunction algorithmSteps(array, iteration, currentIndex, color) {\n  const array1 = Array(array.length).fill(Colors.WHITE);\n\n  array1[currentIndex] = color;\n  array1[currentIndex + 1] = color;\n\n  colorSteps.push(array1);\n  sortingSteps.push(array.slice());\n}\n","import { Colors } from \"../helpers/Colors\";\n\nconst colorSteps = [];\nconst sortingSteps = [];\n\nexport function insertionSort(array) {\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.WHITE));\n\n  for (let i = 1; i < array.length; i++) {\n    let firstUnsorted = array[i];\n    let j = i - 1;\n\n    while (j >= 0 && array[j] > firstUnsorted) {\n      algorithmSteps(array.slice(), i, j, Colors.RED);\n\n      array[j + 1] = array[j];\n      array[j] = firstUnsorted;\n\n      algorithmSteps(array.slice(), i, j, Colors.BLUE);\n      j--;\n    }\n  }\n\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.GREEN));\n\n  return [\"Insertion sort\", sortingSteps, colorSteps];\n}\n\nfunction algorithmSteps(array, iteration, currentIndex, color) {\n  const array1 = Array(array.length).fill(Colors.WHITE);\n\n  array1[iteration] = Colors.GREY;\n  array1[currentIndex] = color;\n  array1[currentIndex + 1] = color;\n\n  colorSteps.push(array1);\n  sortingSteps.push(array.slice());\n}\n","import { Colors } from \"../helpers/Colors\";\n\nconst colorSteps = [];\nconst sortingSteps = [];\n\nexport function selectionSort(array) {\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.WHITE));\n\n  for (let i = 0; i < array.length; i++) {\n    let min = i;\n\n    for (let j = i + 1; j < array.length; j++) {\n      comparisonSteps(array.slice(), min, j, Colors.RED);\n\n      if (array[j] < array[min]) {\n        min = j;\n        comparisonSteps(array.slice(), min, j, Colors.RED);\n      }\n    }\n\n    let tmp = array[i];\n    array[i] = array[min];\n    array[min] = tmp;\n\n    comparisonSteps(array.slice(), i, min, Colors.BLUE);\n  }\n\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.GREEN));\n\n  return [\"Selection Sort\", sortingSteps, colorSteps];\n}\n\nfunction comparisonSteps(array, cmpIndex1, cmpIndex2, color) {\n  const array1 = Array(array.length).fill(Colors.WHITE);\n\n  array1[cmpIndex1] = color;\n  array1[cmpIndex2] = color;\n\n  colorSteps.push(array1);\n  sortingSteps.push(array.slice());\n}\n","import { Colors } from \"../helpers/Colors\";\n\nconst colorSteps = [];\nconst sortingSteps = [];\n\nexport function mergeSortAlgorithm(array) {\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.WHITE));\n\n  mergeSort(array, 0, array.length - 1);\n\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.GREEN));\n\n  return [\"Merge sort\", sortingSteps, colorSteps];\n}\n\nfunction mergeSort(array, startIndex, endIndex) {\n  if (startIndex < endIndex) {\n    var middle = startIndex + parseInt((endIndex - startIndex) / 2);\n    mergeSort(array, startIndex, middle);\n    mergeSort(array, middle + 1, endIndex);\n    merge(array, startIndex, middle, endIndex);\n  }\n}\n\nfunction merge(array, start, middle, end) {\n  var middleIndex = middle - start + 1;\n  var endIndex = end - middle;\n\n  var leftArray = new Array(middleIndex);\n  var rightArray = new Array(endIndex);\n\n  var startLeft = array.indexOf(array[start]);\n  var endLeft = array.indexOf(array[start + middleIndex]);\n\n  var startRight = array.indexOf(array[middle + 1]);\n  var endRight = array.indexOf(array[middle + endIndex]);\n\n  for (let i = 0; i < middleIndex; i++) {\n    leftArray[i] = array[start + i];\n  }\n\n  for (let j = 0; j < endIndex; j++) {\n    rightArray[j] = array[middle + 1 + j];\n  }\n\n  var i = 0;\n  var j = 0;\n  var k = start;\n\n  while (i < middleIndex && j < endIndex) {\n    if (leftArray[i] <= rightArray[j]) {\n      algorithmSteps(\n        array.slice(),\n        k,\n        startLeft,\n        endLeft,\n        startRight,\n        endRight\n      );\n      array[k] = leftArray[i];\n      i++;\n    } else {\n      algorithmSteps(\n        array.slice(),\n        k,\n        startLeft,\n        endLeft,\n        startRight,\n        endRight\n      );\n      array[k] = rightArray[j];\n      j++;\n    }\n    k++;\n  }\n\n  while (i < middleIndex) {\n    array[k] = leftArray[i];\n    algorithmSteps(array.slice(), k, startLeft, endLeft, startRight, endRight);\n    i++;\n    k++;\n  }\n\n  while (j < endIndex) {\n    array[k] = rightArray[j];\n    algorithmSteps(array.slice(), k, startLeft, endLeft, startRight, endRight);\n    j++;\n    k++;\n  }\n}\n\nfunction algorithmSteps(array, k, startLeft, endLeft, startRight, endRight) {\n  const array1 = Array(array.length).fill(Colors.WHITE);\n\n  for (let i = startLeft; i < endLeft; i++) {\n    array1[i] = Colors.ORANGE;\n  }\n\n  for (let i = startRight; i < endRight + 1; i++) {\n    array1[i] = Colors.DARK_ORANGE;\n  }\n\n  array1[k] = Colors.RED;\n\n  colorSteps.push(array1);\n  sortingSteps.push(array.slice());\n}\n","import { Colors } from \"../helpers/Colors\";\n\nconst colorSteps = [];\nconst sortingSteps = [];\n\nexport function quickSortAlgorithm(array) {\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.WHITE));\n\n  quickSort(array, 0, array.length - 1);\n\n  sortingSteps.push(array.slice());\n  colorSteps.push(Array(array.length).fill(Colors.GREEN));\n\n  return [\"Quick sort\", sortingSteps, colorSteps];\n}\n\nfunction quickSort(array, start, end) {\n  if (start < end) {\n    var index = partition(array, start, end);\n    quickSort(array, start, index - 1);\n    quickSort(array, index + 1, end);\n  }\n}\n\nfunction partition(array, start, end) {\n  var pivot = array[end];\n  var i = start - 1;\n\n  for (var j = start; j <= end - 1; j++) {\n    if (array[j] < pivot) {\n      i++;\n      algorithmSteps(array.slice(), i, j, pivot, Colors.RED);\n      swap(array, i, j);\n      algorithmSteps(array.slice(), i, j, pivot, Colors.BLUE);\n    }\n  }\n\n  let partitionIndex = i + 1;\n\n  algorithmSteps(array.slice(), partitionIndex, end, pivot, Colors.RED);\n  swap(array, partitionIndex, end);\n  algorithmSteps(array.slice(), partitionIndex, end, pivot, Colors.BLUE);\n\n  return partitionIndex;\n}\n\nfunction swap(array, i, j) {\n  let tmp = array[i];\n  array[i] = array[j];\n  array[j] = tmp;\n}\n\nfunction algorithmSteps(array, index1, index2, pivot, color) {\n  const array1 = Array(array.length).fill(Colors.WHITE);\n\n  array1[index1] = color;\n  array1[index2] = color;\n  array1[array.indexOf(pivot)] = Colors.GREY;\n\n  colorSteps.push(array1);\n  sortingSteps.push(array.slice());\n}\n","import React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Bar from \"../Bar/Bar\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Slider from \"react-input-slider\";\nimport { bubbleSort } from \"../../algorithms/BubbleSort\";\nimport { insertionSort } from \"../../algorithms/InsertionSort\";\nimport { selectionSort } from \"../../algorithms/SelectionSort\";\nimport { mergeSortAlgorithm } from \"../../algorithms/MergeSort\";\nimport { quickSortAlgorithm } from \"../../algorithms/QuickSort\";\nimport { Colors } from \"../../helpers/Colors\";\n\nconst NUMBER_OF_BARS = 50;\nconst DEFAULT_SPEED = 10;\nconst UNSORTED_COLOR = Colors.WHITE;\nconst BUTTONS_ALGORTIHMS_COLOR = \"danger\";\n\nconst buttonGroupStyle = {\n  marginTop: \"10px\",\n  display: \"flex\",\n  marginBottom: \"10px\",\n};\n\nconst textStyle = {\n  color: \"white\",\n  marginTop: \"50px\",\n};\n\nconst SortingVisualizer = () => {\n  const [running, isRunning] = useState(false);\n  const [speed, setSpeed] = useState(DEFAULT_SPEED);\n  const [steps, setSteps] = useState({\n    algorithmName: \"\",\n    sortingSteps: [],\n    colorSteps: [],\n  });\n\n  useEffect(() => {\n    setSpeed(\n      localStorage.getItem(\"speed\") === null\n        ? DEFAULT_SPEED\n        : localStorage.getItem(\"speed\")\n    );\n\n    setSteps({\n      sortingSteps: generateRandomArray(),\n      colorSteps: Array(NUMBER_OF_BARS).fill(UNSORTED_COLOR),\n    });\n  }, []);\n\n  const saveSpeedToLocalStorage = (x) => {\n    localStorage.setItem(\"speed\", x);\n  };\n\n  const newRandomArray = () => {\n    window.location.reload();\n  };\n\n  const generateRandomArray = () => {\n    const numbers = new Set();\n\n    while (numbers.size !== 50) {\n      numbers.add(Math.floor(Math.random() * 500) + 50);\n    }\n\n    return Array.from(numbers);\n  };\n\n  const animation = (sortAlgorithmFunction) => {\n    const data = sortAlgorithmFunction(steps.sortingSteps);\n\n    isRunning(true);\n    sortingLoop(data[0], data[1], data[2]);\n  };\n\n  const sortingLoop = async (name, sortSteps, colorSteps) => {\n    for (let i = 0; i < sortSteps.length; i++) {\n      setSteps({\n        algorithmName: name,\n        sortingSteps: sortSteps[i],\n        colorSteps: colorSteps[i],\n      });\n\n      await new Promise((resolve) => setTimeout(resolve, speed));\n    }\n  };\n\n  return (\n    <Container>\n      <ButtonGroup style={buttonGroupStyle}>\n        <Button\n          onClick={() => newRandomArray()}\n          variant={BUTTONS_ALGORTIHMS_COLOR}\n        >\n          New array\n        </Button>\n        <Button\n          onClick={() => animation(bubbleSort)}\n          disabled={running}\n          variant={BUTTONS_ALGORTIHMS_COLOR}\n        >\n          Bubble sort\n        </Button>\n        <Button\n          onClick={() => animation(insertionSort)}\n          disabled={running}\n          variant={BUTTONS_ALGORTIHMS_COLOR}\n        >\n          Insertion sort\n        </Button>\n        <Button\n          onClick={() => animation(selectionSort)}\n          disabled={running}\n          variant={BUTTONS_ALGORTIHMS_COLOR}\n        >\n          Selection sort\n        </Button>\n        <Button\n          onClick={() => animation(mergeSortAlgorithm)}\n          disabled={running}\n          variant={BUTTONS_ALGORTIHMS_COLOR}\n        >\n          Merge sort\n        </Button>\n        <Button\n          onClick={() => animation(quickSortAlgorithm)}\n          disabled={running}\n          variant={BUTTONS_ALGORTIHMS_COLOR}\n        >\n          Quick sort\n        </Button>\n      </ButtonGroup>\n      <Row className=\"text-center\">\n        <h5 style={{ color: \"white\" }}>\n          Speed (current update speed: every {speed} ms)\n        </h5>\n      </Row>\n      <div align=\"center\">\n        <Slider\n          axis=\"x\"\n          x={speed}\n          xmax={1000}\n          xmin={10}\n          xstep={10}\n          onChange={({ x }) => {\n            setSpeed(x);\n            saveSpeedToLocalStorage(x);\n          }}\n          disabled={running}\n        />\n      </div>\n\n      <Row className=\"justify-content-center\">\n        {steps.sortingSteps.map((element, index) => (\n          <Bar key={index} height={element} color={steps.colorSteps[index]} />\n        ))}\n      </Row>\n      <Row className=\"text-center\" style={textStyle}>\n        <h1>{steps.algorithmName}</h1>\n      </Row>\n    </Container>\n  );\n};\n\nexport default SortingVisualizer;\n","import Nav from \"./components/Nav/Nav\";\nimport SortingVisualizer from \"./components/SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <>\n      <Nav />\n      <SortingVisualizer />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}